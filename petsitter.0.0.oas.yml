openapi: 3.0.3
info:
  title: PetSitter API
  version: "0.1"
servers:
- url: /
tags:
  - name: Users
    description: User-related operations
  - name: Jobs
    description: Job-related operations
paths:
  /users:
    post:
      security: []
      tags:
        - Users
      summary: Register User
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "201":
          description: Created
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
  /users/{id}:
    get:
      tags:
        - Users
      summary: View User
      operationId: viewUserWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - Users
      summary: Modify User
      operationId: modifyUserWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: deleteUserWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
  /users/{id}/jobs:
    get:
      tags:
        - Users
      summary: List Jobs For User
      operationId: listJobsForUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  /users/{id}/job-applications:
    get:
      tags:
        - Jobs
      summary: List Applications For User
      operationId: listJobAplicationsForUser
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
              examples:
                two-items:
                  summary: Two Job Applications
                  value:
                    items:
                    - id: 123
                      user_id: 123
                      job_id: 123
                      status: PENDING
                    - id: 123
                      user_id: 123
                      job_id: 123
                      status: COMPLETE
                empty:
                  summary: Zero Job Application
                  value:
                    items: []
  /jobs:
    get:
      tags:
        - Jobs
      summary: List/Search Available Jobs
      operationId: listOrSearchAvailableJobs
      parameters:
        - name: sort
          in: query
          description: |
            Indicate the sorting key and direction for the results.
            Use the field name, suffixed with ":asc" for ascending or ":desc" for descending order.
            Valid fileds: start_time, end_time, activitiy
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results to return.
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: cursor
          in: query
          description: |
            Use the cursor from the response to access more results.
          schema:
            type: string
        - name: start_time_before
          in: query
          description: Search jobs starting before this date and time
          schema:
            type: string
            format: date-time
        - name: start_time_after
          in: query
          description: Search jobs starting after this date and time
          schema:
            type: string
            format: date-time
        - name: end_time_before
          in: query
          description: Search jobs ending before this date and time
          schema:
            type: string
            format: date-time
        - name: end_time_after
          in: query
          description: Search jobs ending after this date and time
          schema:
            type: string
            format: date-time
        - name: activity
          in: query
          description: |
            Performs a full-text search for the phrase entered in job activities.
          schema:
            type: string
        - name: pets
          in: query
          description: Searches for pets matching specific criteria.
          style: deepObject
          schema:
            type: object
            properties:
              age_below:
                type: integer
                description: Return only pets with this age or younger.
              age_above:
                type: integer
                description: Return only pets with this age or older.
              species:
                type: string
                description: |
                  Return only pets with this species.
                  Provide multiple species as comma-separated values.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  cursor:
                    type: string
                    description: Cursor for the next result page.
                    nullable: true
              examples:
                with-some-data:
                  summary: With some data
                  value:
                    items:
                    - id: 123
                      creator_user_id: 345
                      start_time: 2020-06-01T00:00:00.000Z
                      end_time: 2020-06-02T00:00:00.000Z
                      dog:
                        name: Fido
                        age: 2
                        breed: Doberman
                        size: medium
                      activity: walk
                    - id: 234
                      creator_user_id: 345
                      start_time: 2020-06-01T00:00:00.000Z
                      end_time: 2020-06-02T00:00:00.000Z
                      dog:
                        name: Rex
                        age: 2
                        breed: Doberman
                        size: medium
                      activity: walk
    post:
      tags:
        - Jobs
      summary: Create Job
      operationId: createJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        "201":
          description: Created
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OASError'
        401:
          description: Unathorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OASError'
        403:
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
  /jobs/{id}:
    get:
      tags:
        - Jobs
      summary: View Job
      operationId: viewJobWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    put:
      tags:
        - Jobs
      summary: Modify Job
      operationId: modifyJobWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    delete:
      tags:
        - Jobs
      summary: Delete job
      operationId: deleteJobWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
  /jobs/{id}/job-applications:
    get:
      tags:
        - Jobs
      summary: List Application For Job
      operationId: listJobApplicationsForJob
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
    post:
      tags:
        - Jobs
      summary: Create Job Application
      operationId: createJobApplication
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobApplication'
      responses:
        "201":
          description: Created
          headers:
            Location:
              style: simple
              explode: false
              schema:
                type: string
  /job-applications/{id}:
    put:
      tags:
        - Jobs
      summary: Modify Job Application
      operationId: modifyJobApplicationWithId
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        description: Update the application details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobApplication'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobApplication'
  /sessions:
    post:
      security: []
      tags:
        - Users
      summary: Start Session (Login)
      operationId: startSession
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'           
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        password:
          type: string
        full_name:
          type: string
        roles:
          type: array
          items:
            type: string
      example:
        password: password
        full_name: full_name
        roles:
        - roles
        - roles
        id: 0
        email: email
    Job:
      type: object
      properties:
        id:
          type: integer
        creator_user_id:
          type: integer
        start_time:
          type: string
        end_time:
          type: string
        activity:
          type: string
        pets:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
      example:
        creator_user_id: 6
        start_time: start_time
        activity: activity
        end_time: end_time
        id: 0
        dog:
          size: size
          name: name
          age: 1
          breed: breed
    JobApplication:
      type: object
      properties:
        id:
          type: integer
        status:
          type: string
        user_id:
          type: integer
        job_id:
          type: integer
      example:
        user_id: 6
        job_id: 1
        id: 0
        status: status
    Pet:
      allOf:
        - type: object
          properties:
            name:
              type: string
            age:
              type: integer
        - oneOf:
          - $ref: '#/components/schemas/Cat'
          - $ref: '#/components/schemas/Dog'
          discriminator:
            propertyName: species
            mapping:
              Cat: '#/components/schemas/Cat'
              Dog: '#/components/schemas/Dog'
    Dog:
      type: object
      properties:
        species:
          type: string
        breed:
          type: string
        size:
          type: string
      required:
        - species
    Cat:
      type: object
      properties:
        species:
          type: string
        breed:
          type: string
      required:
        - species
    Session:
      type: object
      properties:
        user_id:
          type: string
        auth_header:
          type: string
    OASError:
      type: object
      properties:
        message:
          type: string
          description: Human-readable error message
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                description: |
                  For input validation errorrs, identifies where
                  in the JSON request body the error occurred.
              message:
                type: string
                description: Human-readable error message.
              errorCode:
                type: string
                description: Code indicating error type.
    Problem:
      type: object
      properties:
        type:
          type: string
          description: URI indicating error type.
        title:
          type: string
          description: Human-readable error title.
        status:
          type: integer
          description: HTTP status code.
        detail:
          type: string
          description: Human-readable error details
        instance:
          type: string
          description: URI indicating error instance.
  securitySchemes: 
    SessionToken:
      type: apiKey
      in: header
      name: Authorization  
security:
  - SessionToken: []